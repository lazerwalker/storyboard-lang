PARSER:
* Parse bag nodes
* Special-case "track"

ENGINE:
* Start node is called 'start' (think about if we need a syntax to change that)


--

* Should graph nodes be allowed to have a top-level predicate? Does that even make sense?
* The JSON structure needs to update to support "OR"
    * I think this means that instead of "predicate" being an object with variable names as keys, it becomes a tree structure of e.g. `{ "and": {left: {"foo": {eq: true}}, right: { "or": {...}}}`
* Implement inline bag nodes
    * They can either be turned into normal bag nodes at compile-time, with generated node Ids, or they can become inline node-like things the runtime can consume
* Instruction passages ("allows_repeats", etc) need to get applied to the top-level JSON rather than be an array. Maybe these don't actually want to be Passages, but an optional token?
    * "dead_end" seems to be a recent invention, rather than a thing I've used in production. Might just want to care about allows_repeats for now
    * There's a git stash that tries to explicitly check for an optional "allows_repeats" at the start of a node
* Inline bag nodes: if the difference is -> vs <->, that should be reflected in the grammar
* Content strips out whitespace. Provide a way to opt-out of that behavior

---
* "wait until" syntax
* Inline bag nodes: a good idea at all?
* Inline bag nodes: how to specify "run this once" vs "run indefinitely"
* How to describe parallel node graphs? Something that needs runtime work?